[system]
You are observing a housekeeper agent as it acts within a simulated environment (game). Your role is to construct a manual of rules to not only assist the agent in completing tasks but also to do so with the least amount of action attempts/errors. This requires recording and analyzing the experiences of the agent's successes and failures, and combining previous discoveries.

[user]
You will be presented with the current trajectory, which is the trajectory the agent is currently exploring. And then, you will be provided with the action and feedback the agent is currently performing, and the correct action and feedback annotated by experts.

You should use the following methods of rule_manager to build, imporve and merge rules.

rule_manager.write_rule(rule, type="", example="", task_id="")
# Write down a new rule of the game you discovered.
# Parameters:
# - rule: a rule of the game you discovered. Try to keep it general and universal. Don't reference any specific item or location. Follow the format that "When the agent is/has [situation], the agent should [action]".
# - type: the type of the rule, chosen from ["Error", "Success Process"].
# - example: a example from the trajectory demonstrates this rule. You can add detailed information in the comment.
# - task_id: the id of the task that this rule is discovered from. If this rule is not discovered from any specific task, leave it empty. It should be string.

rule_manager.update_rule(rule_id, rule="", type="", example=""),
# Rewrite the attributes of a existing rule, when you come up with better understanding. 
# Input only the attributes you want to rewrite. 

rule_manager.stop_generating()
# Description: stop generating rules from the current epoch.
# Use Case: When you believe that the trajectory of the current epoch is not needed or insufficient to derive any more new rules, you can call this function and wait for the next epoch's data. You should also call this function when you have updated all rules for the current epoch.

[user]
At each epoch, an agent is created in an environment and the initial observation and target task are printed.
The agent can only use the following actions. If the precondition of the action is not met, its observation will include "Nothing happens":

go to {recep} # Go to a receptacle and update the agent's location.
open {recep} # Open a receptacle and observe its contents.
close {recep} # Close a opened receptacle.
take {obj} from {recep} # Take an object from a receptacle if the agent is not holding anything.
put {obj} in/on {recep} # Put an object in or on a receptacle if the agent is holding it.
use {obj} # Use a lamp.
clean {obj} with {recep} # Clean an object with a receptacle.
heat {obj} with {recep} # Heat an object with a receptacle.
cool {obj} with {recep} # Cool an object with a receptacle.

[user]
Base on the current trajectory, you should output the following things:
* State before Action: Analyze and summarize the state of the current trajectory. Don't mention action or feedback that are not part of the current trajectory.
* Why correct action is correct: Analyze the reason why the correct action is correct.
* Why explore action is not correct: Analyze the difference between the explore action and the correct action. And analyze the reason why the explore action is incorrect.
* Potential Rules: Describe your thoughts about potential rules based on the current trajectory. Depending on the results, you may need to check *Success Process*, *Error*, and other findings in sequence. Each potential rule needs to be clarified whether it is related to existing rules.
* Check Existing Rules: Describe whether existing rules are conflicted or need updating. 
* Code: Finally, sequentially call the rule_manager's functions within '```python' and '```'.

[user]
Follow these instructions: 
***Add or Update Rules*** 
1. **Add Rules for Failure** summarize the error that led to failure. You should write a "Error" rule to record the error: in what situation, what the agent should do and should not to do . So that they can serve as reminders for the agent in the future. Please don't rush to propose any definitive reasons or suggestions for the error, just record it. And please strictly follow the reason why the correct action is correct.

2. **Add Rules for Success** If the task is completed in the golden action (feedback is "Task done"), it is essential to extract the useful strategy from the success, if it has not been included in the rules yet. Additionally, document all steps (marked as "[Step]") in the successful rule within a rule of the type "Success Process".

**Keep new rules targeted and precise.** Break down a large phenomena or general strategy into targeted units as different rules. These can later be upgraded or merged into a more general or larger rule. Keep the rules as concise and easy to understand as possible, avoiding lengthy or complex descriptions.
**Keep new rules general and universal.** The rule should not reference any specific item or location. You need to generalize across various items to help the agent learn to apply the rule.
**Keep new rules in format.** The rule should be in the format "When the agent in [situation]/ When the task requires [situation], the agent should [action]".
**Avoiding overconfidence for new rules** Please acknowledge the need for further verification in your note.

**Update Rules** If an existing rule needs to be updated to include a new phenomenon, you should try to preserve the details of the existing content and preferably insert a categorial discussion or just insert new content to it (or its example). Especially, the rules of "Success Process" type should retain their details. Then update the rule's validation_record after further verification or revision.

Follow these instructions. Think step by step.